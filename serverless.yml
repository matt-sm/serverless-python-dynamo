service: serverless-python-dynamo

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: python3.7
  profile: serverless

  environment:
    TASK_DYNAMODB_TABLE: ${self:service}-task-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*      
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TASK_DYNAMODB_TABLE}"

functions:
  createTask:
    handler: api/functions/task.create
    events:
      - http:
          path: tasks
          method: post
          cors: true
  getTask:
    handler: api/functions/task.get
    events:
      - http:
          path: tasks/{id}
          method: get
          cors: true
  updateTask:
    handler: api/functions/task.update
    events:
      - http:
          path: tasks/{id}
          method: put
          cors: true
resources:
  Resources:
    TasksDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.TASK_DYNAMODB_TABLE}

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-python-requirements
custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true # create tables on start
  pythonRequirements:
    dockerizePip: non-linux